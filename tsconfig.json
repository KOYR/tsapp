{
  "compilerOptions": {
    "target": "es5", //指定es5版本
    "lib": [ // 包含在编译中的依赖库的文件列表
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true, //允许编译js
    "skipLibCheck": true, //跳过声明文件的类型检查
    "esModuleInterop": true, // 禁用命名空间引用 (import * as fs from "fs") 启用 CJS/AMD/UMD 风格引用 (import fs from "fs")
    "allowSyntheticDefaultImports": true, // 允许从没有默认导出的模块进行默认导入
    "strict": true, // 启用所有严格类型检查选项
    "forceConsistentCasingInFileNames": true, // 不允许对同一个文件使用不一致格式的引用
    "noFallthroughCasesInSwitch": true, //将严格校验switch-case语法。
    "module": "esnext", // 指定模块代码生成 //仅当 “module” 选项设置为 “esnext” 或 “system”，并且 “target” 选项设置为 “es2017” 或更高版本时，才允许使用顶级 “await” 表达式。
    "moduleResolution": "node", // 使用 Node.js 风格解析模块
    "resolveJsonModule": true, // 允许使用 .json 扩展名导入的模块
    "isolatedModules": true, //将每个文件作为单独的模块（与“ts.transpileModule”类似）。
    "noEmit": true, // 不输出(意思是不编译代码，只执行类型检查
    "jsx": "react-jsx" // 在.tsx文件中支持JSX
  },
  "include": [ // TypeScript文件进行类型检查包括的文件 
    "src"
  ]
}

//https://www.tslang.cn/docs/handbook/compiler-options.html